---
title: "Julia for Biomathematics"
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: false
execute:
  echo: true
  message: false
jupyter: julia-1.9
bibliography: biomath_2024.bib
license: "CC BY-NC-SA 4.0"
---

[![Artwork by Luxor](https://docs.juliahub.com/Luxor/HA9ps/2.13.0/assets/figures/juliaspinner.gif){fig-alt="A gif showing the logo for the Julia progrmmin language." width=130 fig-align="left"}](https://docs.juliahub.com/Luxor/HA9ps/2.13.0/tutorial/simple-animation/)


## Overview

Scientific computing software plays a major role in biomathematics for many reasons some of which include:

* The complexity of biological systems leads to models or equations that are difficult to work with analytically but can be handled reasonably well by numerical methods. 

* The need to synthesize theoretical models and data from experiments.

* Plots and other visualizations are important for understanding and communicating scientific ideas and results.

* Computing allows us to use theoretical models to conduct experiments [*in silico*](https://en.wikipedia.org/wiki/In_silico) that would be difficult or impossible to conduct otherwise. 

Thus, this course will make use of scientific computing software. Three commonly used free and open-source languages for scientific computing in biomathematics are [R](https://www.r-project.org/), [Julia](https://julialang.org/), and [Python](https://www.python.org/). In this course, we will mostly use R, but it's worth knowing at least a little about scientific computing in all three languages as each of them has its own strengths and weaknesses in the context of scientific computing for biomathematics. The goal is not to teach you to  become an expert in any of these languages, but rather to become familiar with how to use them to solve some basic problems in biomathematics. Thus, this document is more of a reference than a tutorial. 

This page will focus on Julia. The other two languages have their own pages:

* [R for Biomathematics](https://biomath2024.netlify.app/biomath_r)

* [Python for Biomathematics](https://biomath2024.netlify.app/biomath_python)

Each of these pages will have a similar structure to this one. We do not provide details on or even an introduction to the basics of programming or the structure of any of the languages. There are many resources available for learning these things. Instead, we focus on providing some concise examples of the use of these languages for scientific computing in biomathematics. The hope is that the reader will be able to copy and modify these examples to solve their own problems.


The section titles listed in the table of contents for the page should indicate the topics or types of problems we provide examples for. For some of the more involved code, we provide links to additional webpages that provide more details. In some cases, we provide links to potentially helpful videos or web sites where the reader can learn more.


## Julia

The [Julia language](https://julialang.org/) is at the forefront of high-performance numerical and scientific computing  [@bezanson2017julia]. You can learn more about the history of Julia [here](https://en.wikipedia.org/wiki/Julia_(programming_language)).

### Functions and Packages

As in R, most of the algorithms and methods we will want to use in solving problems in biomathematics are implemented as functions in Julia. Base Julia contains a number of functions including many that are useful for scientific computing. For example, base Julia contains a function `sin` that implements the mathematical function $\sin(x)$. It is called as follows:

```{julia}
sin(pi/4.0)
```

However, most of the functions we will use are not in base Julia but rather are contained in packages. A package is a collection of functions and other objects that can be loaded into Julia and used. Julia comes with a built-in package manager that allows you to install and manage packages. You can learn about the package manager through either the [package manager documentation](https://docs.julialang.org/en/v1/stdlib/Pkg/) of the following video:

*  Managing Packages in Julia YouTube video, [watch video on YouTube](https://youtu.be/KldNhe4kvuk?si=63h0lTFtiPkKQWjL).
  
{{< video https://youtu.be/KldNhe4kvuk?si=63h0lTFtiPkKQWjL width="800" height="500" >}}



### Envinronment Setup

One thing that is a little different working in Julia (and also Python) compared to R is that it's common practice to utilize a separate environment for each project. This is done to avoid conflicts between packages and package versions that might be used in different projects. Basically, a project consists of a folder that contains files named `Project.toml` and `Manifest.toml`. You can learn the details about Julia environments by reading the [environment documentation](https://docs.julialang.org/en/v1/manual/code-loading/#Environments-1) or get a short tutorial by watching the following video:


*  Julia environments YouTube video, [watch video on YouTube](https://youtu.be/MC-wjQTXOOA?si=mdtPngyDg-m4I1Wa).
  
{{< video https://youtu.be/MC-wjQTXOOA?si=mdtPngyDg-m4I1Wa width="800" height="500" >}}

The `DrWatson.jl` package provides a convenient way to manage projects and environments in Julia. You can learn more about `DrWatson.jl` by reading the [documentation](https://juliadynamics.github.io/DrWatson.jl/stable/) or watching the following video:

{{< video https://youtu.be/jKATlEAu8eE?si=DkjhGrGaeCUXOR2l width="800" height="500" >}}

The following code uses `DrWatson.jl` to activate the environment for this project which is named `biomath_2024`:

```{julia}
#| code-fold: true
#| code-summary: "Show the code" 

# import DrWatson.jl package
using DrWatson

# activate the biomath_2024 environment
@quickactivate "biomath_2024"
```


Now that we have activated our environment, we can use the package manager `Pkg.jl` to see which packages are installed in the environment and their versions:

```{julia}
#| code-fold: true
#| code-summary: "Show the code"


# import Pkg.jl package
import Pkg
# list packages installed in environment
Pkg.status()
```


The nice thing about working with Julia environments is that we can easily share the environment with others. The `Project.toml` and `Manifest.toml` files contain all the information needed to recreate the environment. If you download the project folder for `biomath_2024` from the [GitHub repository](https://github.com/jmgraham30/biomath_2024/tree/main), then all you have to do is:

1. Start Julia in the `biomath_2024` folder which contains the `Project.toml` and `Manifest.toml` files.

2. Activate the environment using `DrWatson.jl` as shown above.

3. Run the `instatiate` command in the package manager to install all the packages listed in the `Project.toml` file[^1].

[^1]: Note that you have to activate the environment any time you want to work in the project. However, you only need to instatiate the project the first time you use it in order to install all the packages. After that, you can just activate the environment and start working.

Some of the packages most relevant for solving problems in biomathematics include:

*  [Plots.jl](http://docs.juliaplots.org/latest/) for plotting.

*  [DifferentialEquations.jl](https://diffeq.sciml.ai/stable/) for numerical computing with differential equations.

* [MethodOfLines.jl](https://docs.sciml.ai/MethodOfLines/stable/) for numerical computing with partial differential equations.

## Plotting 

```{julia}
using Plots, LaTeXStrings
```


```{julia}
#| label: fig-plot_1
#| fig-cap: "Plot of $f(x)=x^2$"


f(x) = x^2
plot(f,-2.0,2.0, label=L"$f(x)=x^2$")
```


```{julia}
#| label: fig-plot_2
#| fig-cap: "Add plot of $g(x) = x^3$ to plot of $f(x)=x^2$"


g(x) = x^3
plot!(g,-2.0,2.0, label=L"$g(x)=x^3$")
```


```{julia}
#| label: fig-plot_3
#| fig-cap: "Plots of $f(x) = x^2$ and $g(x)=x^3$ on same axes with some customizations."

plot([f, g],-2.0,2.0, lw=2, lc=["steelblue" "purple"],label=[L"$f(x)=x^2$" L"$g(x)=x^3$"])
```


```{julia}
#| label: fig-plot_4
#| fig-cap: "Plots of $f(x) = x^2$ and $g(x)=x^3$."

p_1 = plot(f,-2.0,2.0, lw=2, lc="steelblue", title=L"$f(x)=x^2$")
p_2 = plot(g,-2.0,2.0, lw=2, lc="purple", title=L"$g(x)=x^3$")

plot(p_1,p_2, layout=(1,2), legend=false)
```


*  Plotting in Julia YouTube video, [watch video on YouTube](https://youtu.be/yZRw1uP41zI?si=7uwR65DS1_5zaPkM).
  
{{< video https://youtu.be/yZRw1uP41zI?si=7uwR65DS1_5zaPkM width="800" height="500" >}}

## Matrices and Linear Systems

Some methods for linear algebra in Julia are provided by the [`LinearAlgebra.jl`](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/) package[^2]. The `LinearAlgebra.jl` package is part of the Julia [standard library](https://github.com/JuliaLang/julia/tree/master/stdlib) so it doesn't need to be installed but must be imported. We can import the package as follows:

[^2]: Another package that provides an interesting approach to solving linear systems in Julia is [`LinearSolve.jl`](https://docs.sciml.ai/LinearSolve/stable/).

```{julia}
using LinearAlgebra
```

Here's a vector:

```{julia}
my_vect = [1.0,-1.0,1.0]
```

Here's a matrix:

```{julia}
my_matrix = [1.0 0.0 -1.0;
             3.0 1.0 2.0; 
             -1.0 1.0 2.0]
```

Here's the matrix-vector product:

```{julia}
b_vect = my_matrix * my_vect
b_vect
```

Here's the determinant of the matrix:

```{julia}
det(my_matrix)
```

Here are the eigenvalues and eigenvectors of the matrix:

```{julia}
eigen(my_matrix)
```

Here's the solution to the linear system:

```{julia}
my_matrix \ b_vect
```

To learn more, check out

*  Basic Linear Algebra in Julia YouTube video, [watch video on YouTube](https://youtu.be/IFkQ0aB6eHs?si=0Ct_A75LuQzl892o).

{{< video https://youtu.be/IFkQ0aB6eHs?si=0Ct_A75LuQzl892o width="800" height="500" >}}

## Root Finding

Root finding is the process of finding one or more values $x$ such that $f(x) = 0$[^3]. A common application of root finding in biomathematics is to find the steady states of a dynamical system. 

[^3]: Note that we allow for the function $f$ to be vector-valued, in which case we are looking for solutions to a system of nonlinear equations.

There are a number of different packages that facilitate root finding in Julia. Some notable one include:

*  [`Roots.jl`](https://github.com/JuliaMath/Roots.jl)

* ['NLsolve.jl'](https://github.com/JuliaNLSolvers/NLsolve.jl)

* [`NonlinearSolve.jl`](https://github.com/SciML/NonlinearSolve.jl)

We illustrate using the `Roots.jl` to find all of the roots of the function $f(x) = x^2 - 1$ on the interval $[-2,2]$:

```{julia}
using Roots

f(x) = x^2 - 1

f_roots = find_zeros(f,-2.0,2.0)
```

Let's make a plot of the function and its roots:

```{julia}
#| label: fig-root_finding_1
#| fig-cap: "Roots of the function $f(x) = x^2 - 1$ on the interval $[-2,2]$."

plot(f,-2.0,2.0, lc="steelblue",lw=2, label=L"$f(x)=x^2-1$")

scatter!(f_roots,zeros(length(f_roots)), color="purple",label="roots")
```

The `Roots.jl` package focuses on scalar functions. The following link illustrates the use of `NonlinearSolve.jl` package to find the roots of the system of equations $f(x,y) = (x^2 + y^2 - 1, x^2 - y^2 + 0.5)$:

* [Solving a nonlinear system](https://biomath-computing.netlify.app/notebooks/julia_nonlinear_solve/) - this page shows an example of solving a nonlinear system in Julia using the `NonlinearSolve.jl` package.  The example also shows off some of the features of the [`ModelingToolkit.jl`](https://docs.sciml.ai/ModelingToolkit/stable/) package functionality.

## Optimization

Optimization is the process of finding the extrema, that is, maximum or minimum value of a function. A common application of optimization in biomathematics is to estimate parameters for a mathematical model to fit data. One of the major challenges in such optimization problems is the potential for multiple local extrema. Here, introduce the use of basic optimization methods implemented in Julia. Additional details, examples, and applications will be covered in course lectures.

There are a number of Julia packages for optimization. Here, we focus on the use of the [`Optim.jl`](https://julianlsolvers.github.io/Optim.jl/stable/#) package.Here's an example of using the `Optim.jl` package to find the minimum of the function $f(x) = x^2 - 1$ on the interval $[-2,2]$:

```{julia}
#| label: fig-optimization_1
#| fig-cap: "Minimum of the function $f(x) = x^2 - 1$ on the interval $[-2,2]$."

using Optim

f(x) = x^2 - 1

result = optimize(f,-2.0,2.0)

x_m = Optim.minimizer(result)

y_m = Optim.minimum(result)

plot(f,-2.0,2.0, lc="steelblue",lw=2, label=L"$f(x)=x^2-1$")

scatter!([x_m],[y_m], color="purple",label="minimum")

```

Here's an example of using the `Optim.jl` to find the minimum of the function $f(x,y) = x^2 + y^2 - 1$:

```{julia}
f(x) = x[1]^2 + x[2]^2 - 1

result = optimize(f,[-1.0,1.0], LBFGS(); autodiff = :forward)

Optim.minimizer(result)
```



## Differential Equations and Dynamical Systems


* [Webpage with basic examples](https://biomath-computing.netlify.app/notebooks/ode_ds_julia/)

*  Intro to Differential Equations in Julia YouTube video, [watch video on YouTube](https://youtu.be/lWmKCa6ih9Y?si=HU-JBSqsP-v1lX4q).
  
{{< video https://youtu.be/lWmKCa6ih9Y?si=HU-JBSqsP-v1lX4q width="800" height="500" >}}





## Partial Differential Equations

[Partial differential equations](https://en.wikipedia.org/wiki/Partial_differential_equation) (PDEs) generalize ordinary differential equations (ODEs) to allow for solutions that are functions of two or more variables. Typically, in the context of biomathematics, the variables represent time and spatial coordinates. Thus, PDEs allow us to model how a biological systems change in both time and space. The examples we will see in this course will mostly be  [convection-diffusion](https://en.wikipedia.org/wiki/Convection%E2%80%93diffusion_equation) type equations or systems of such equations. These PDEs have the form

$$
\frac{\partial c}{\partial t} = \nabla \cdot \left( D \nabla c - {\bf v} c \right) + R
$$

Special cases include [diffusion equations](https://en.wikipedia.org/wiki/Diffusion_equation) of which the [heat equation](https://en.wikipedia.org/wiki/Heat_equation) 

$$
\frac{\partial c}{\partial t} = D \nabla^2 c
$$

is a special case. In one dimension, the heat equation is

$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2}
$$

Often, in order to have a complete model, we need to specify both initial conditions and boundary conditions for the PDE problem. For example in the case of the one-dimensional heat equation, we might specify the initial temperature distribution $c(x,0)$ and the values of the flux at the boundaries, that is $\frac{\partial c}{\partial x}(0,t)$ and $\frac{\partial c}{\partial x}(L,t)$ for $t>0$. 

There are many approaches to the numerical solution of PDEs. We will focus on the [method of lines](http://www.scholarpedia.org/article/Method_of_lines) which discretizes the spatial domain and then uses ODE solvers such as those we previously described to solve the resulting system of ODEs.

For Julia, the [`MethodOfLines.jl`](https://docs.sciml.ai/MethodOfLines/stable/) package is available to facilitate the implementation of the method of lines for PDEs. The following links illustrate the use of this package:

* [Numerical solution of the heat equation in Julia](https://biomath-computing.netlify.app/notebooks/heat_equation_modeltoolkit/) - this page demonstrates using the `MethodOfLines.jl` package to obtain and visualize numerical solutions for the heat equation in one dimension.

## Random Variables


While MATH 463 primarily focuses on deterministic models, stochastic models are also important in biomathematics, see for example [@allenIntroductionStochasticProcesses2011]. We won't cover stochastic models in the course but will have a few occasions where it will be useful to add some stochasticity to a deterministic model. Many different probability distributions are available in Julia through the [`Distributions.jl`](https://juliastats.org/Distributions.jl/stable/) package.  In this section, we introduce some functions associated with distributions and random sampling. Primarily, we focus on sampling from a distribution and accessing the probability density or probability mass function for a distribution. Further, we will demonstrate the main functions for the normal distribution and the binomial distribution. Working with other distributions is handled similarly. Additional details, examples, and applications will be covered in course lectures.


### Binomial Distributions


Recall that a [binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution) is a discrete probability distribution that models the number of successes in a sequence of $n$ independent experiments, each asking a yes–no question, and each with its own Boolean-valued outcome: success/yes/true/one (with probability $p$) or failure/no/false/zero (with probability $q = 1 - p$). A single success/failure experiment is also called a Bernoulli trial or Bernoulli experiment and a sequence of outcomes is called a Bernoulli process; for a single trial, i.e., $n = 1$, the binomial distribution is a Bernoulli distribution. The probability of outcomes for a binomial random variable are given by the binomial probability mass function for:

$$
f(k,n,p) = \Pr(k;n,p) = \Pr(X = k) = \binom{n}{k}p^k(1-p)^{n-k}
$$

where $k$ is the number of successes, $n$ is the number of trials, and $p$ is the probability of success in each trial. 

Let's work with a binomial distribution in Julia. First, we import the `Random.jl`, `Statistics.jl`, and `Distributions.jl` packages in order to access relevant functions:

```{julia}
using Random, Statistics, Distributions
```

Next, we create a binomial random variable with $n = 10$ and $p = 0.5$:

```{julia}
n = 10
p = 0.5
binom_rv = Binomial(n,p)
```

We can now access the mean, variance, and standard deviation of the random variable:

```{julia}
mean(binom_rv)
```



```{julia}
var(binom_rv)
```



```{julia}
std(binom_rv)
```

Notice that the mean is $np$ and the variance is $np(1-p)$, as expected. Further, the standard deviation is the square root of the variance:

```{julia}
sqrt(2.5)
```

We can work with the probability mass function as follows:

```{julia}
pdf(binom_rv,4)
```


@fig-binom-pmf displays the probability mass function for a binomial random variable with $n=10$ and $p=0.5$.

```{julia}
#| label: fig-binom-pmf
#| fig-cap: "Probability mass function for a binomial random variable with $n=10$ and $p=0.5$."

# Generate x values (possible number of successes)
x_values = 0:n

# Calculate the corresponding PDF values
pmf_values = pdf(binom_rv, x_values)

# Plot the probability mass function
bar(x_values, pmf_values, color="steelblue", xlabel="Number of Successes", ylabel="Probability", label="Binomial(n=10, p=0.5)", legend=:topleft)

# Customize the plot
title!("Binomial Distribution PMF")
```

We can also sample from the binomial distribution:

```{julia}
rand(binom_rv,10)
```


Let's generate a large number of samples and plot a histogram of the results, see @fig-binom-samples. 

```{julia}
#| label: fig-binom-samples
#| fig-cap: "Histogram of 1000 samples from a binomial random variable with $n=10$ and $p=0.5$."

# Generate 1000 samples
samples = rand(binom_rv,1000)

# Plot a histogram of the samples
histogram(samples, bins = -0.5:1:10.5, color="steelblue", xlabel="Number of Successes", ylabel="Count", label="Binomial(n=10, p=0.5)", legend=:topleft)

# Customize the plot
title!("Binomial Distribution Samples")

```



### Normal Distributions

Recall that a [normal distribution](https://en.wikipedia.org/wiki/Normal_distribution) is a continuous probability distribution that is symmetric about the mean, showing that data near the mean are more frequent in occurrence than data far from the mean. In graph form, normal distribution will appear as a bell curve. Normal distributions are extremely important in statistics and are often used in the natural and social sciences to represent real-valued random variables whose distributions are not known. A random variable with a Gaussian distribution is said to be normally distributed and is called a normal deviate. The probability that a normal random variable with mean $\mu$ and variance $\sigma^{2}$ has a value between $a$ and $b$ is given by the definite integral of a normal density function defined by:

$$
f(x \mid \mu, \sigma^2) = \frac{1}{\sqrt{2\pi\sigma^2}} \exp\left(-\frac{(x-\mu)^2}{2\sigma^2}\right)
$$

The parameter $\sigma$ is called the standard deviation. 


Let's work with a normal distribution in Julia. First, we create a normal random variable with $\mu = 5$ and $\sigma = 1.5$:

```{julia}
mu = 5.0
sigma = 1.5
norm_rv = Normal(mu,sigma)
```

@fig-norm-pdf displays the probability density function for a normal random variable with $\mu=5$ and $\sigma=1.5$. 

```{julia}
#| label: fig-norm-pdf
#| fig-cap: Probability density function for a normal random variable with $\mu=5$ and $\sigma=1.5$.

f(x) = pdf(norm_rv,x);

plot(f,0.0,10.0, label=L"\mu=5, \sigma=1.5",lw=2, color="steelblue", xlabel="x", ylabel="Density", legend=:topleft)
```

We can sample from a normal distribution with $\mu=5$ and $\sigma=1.5$ as follows:

```{julia}
rand(norm_rv,10)
```


Let's generate a large number of samples and plot a histogram of the results, see @fig-norm-samples. 

```{julia}
#| label: fig-norm-samples
#| fig-cap: Histogram of 1000 samples from a normal random variable with $\mu=5$ and $\sigma=1.5$.

# Generate 1000 samples
samples = rand(norm_rv,1000)

# Plot a histogram of the samples
histogram(samples, bins = 0.0:0.25:10.0,normalize=:pdf, xlabel="x", ylabel="Density", label="", legend=:topleft, color="lightblue")

# Overlay the PDF
plot!(f,0.0,10.0, label=L"\mu=5, \sigma=1.5",lw=2, color="steelblue")

```


For more on probability and statistics using Julia, we recommend [Statistics with Julia](https://statisticswithjulia.org/) and [Introduction to Probability for Data Science](https://probability4datascience.com/).

## Symbolic Math

*  Symbolic Computation in Julia YouTube video, [watch video on YouTube](https://youtu.be/L47k2zjPU9s?si=MIiUEqrL-dPzM__l).
  
{{< video https://youtu.be/L47k2zjPU9s?si=MIiUEqrL-dPzM__l width="800" height="500" >}}




## References

::: {#refs}
:::

:::{.callout-tip collapse="true"}
## Expand for Session Info
```{julia}
#| code-fold: true
#| code-summary: "Show the code"

VERSION
```

```{julia}
#| code-fold: true
#| code-summary: "Show the code"

# import Pkg.jl package
import Pkg
# list packages installed in environment
Pkg.status()
```
:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)
