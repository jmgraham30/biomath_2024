---
title: "Julia for Biomathematics"
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: false
execute:
  echo: true
  message: false
jupyter: julia-1.9
bibliography: biomath_2024.bib
license: "CC BY-NC-SA 4.0"
---

[![Artwork by Luxor](https://docs.juliahub.com/Luxor/HA9ps/2.13.0/assets/figures/juliaspinner.gif){fig-alt="A gif showing the logo for the Julia progrmmin language." width=130 fig-align="left"}](https://docs.juliahub.com/Luxor/HA9ps/2.13.0/tutorial/simple-animation/)


## Overview

Scientific computing software plays a major role in biomathematics for many reasons some of which include:

* The complexity of biological systems leads to models or equations that are difficult to work with analytically but can be handled reasonably well by numerical methods. 

* The need to synthesize theoretical models and data from experiments.

* Plots and other visualizations are important for understanding and communicating scientific ideas and results.

* Computing allows us to use theoretical models to conduct experiments [*in silico*](https://en.wikipedia.org/wiki/In_silico) that would be difficult or impossible to conduct otherwise. 

Thus, this course will make use of scientific computing software. Three commonly used free and open-source languages for scientific computing in biomathematics are [R](https://www.r-project.org/), [Julia](https://julialang.org/), and [Python](https://www.python.org/). In this course, we will mostly use R, but it's worth knowing at least a little about scientific computing in all three languages as each of them has its own strengths and weaknesses in the context of scientific computing for biomathematics. The goal is not to teach you to  become an expert in any of these languages, but rather to become familiar with how to use them to solve some basic problems in biomathematics. Thus, this document is more of a reference than a tutorial. 

This page will focus on Julia. The other two languages have their own pages:

* [R for Biomathematics](https://biomath2024.netlify.app/biomath_r)

* [Python for Biomathematics](https://biomath2024.netlify.app/biomath_python)

Each of these pages will have a similar structure to this one. We do not provide details on or even an introduction to the basics of programming or the structure of any of the languages. There are many resources available for learning these things. Instead, we focus on providing some concise examples of the use of these languages for scientific computing in biomathematics. The hope is that the reader will be able to copy and modify these examples to solve their own problems.


The section titles listed in the table of contents for the page should indicate the topics or types of problems we provide examples for. For some of the more involved code, we provide links to additional webpages that provide more details. In some cases, we provide links to potentially helpful videos or web sites where the reader can learn more.


## Julia

The [Julia language](https://julialang.org/) is at the forefront of high-performance numerical and scientific computing  [@bezanson2017julia]. You can learn more about the history of Julia [here](https://en.wikipedia.org/wiki/Julia_(programming_language)).

### Functions and Packages

As in R, most of the algorithms and methods we will want to use in solving problems in biomathematics are implemented as functions in Julia. Base Julia contains a number of functions including many that are useful for scientific computing. For example, base Julia contains a function `sin` that implements the mathematical function $\sin(x)$. It is called as follows:

```{julia}
sin(pi/4.0)
```

However, most of the functions we will use are not in base Julia but rather are contained in packages. A package is a collection of functions and other objects that can be loaded into Julia and used. Julia comes with a built-in package manager that allows you to install and manage packages. You can learn about the package manager through either the [package manager documentation](https://docs.julialang.org/en/v1/stdlib/Pkg/) of the following video:

*  Managing Packages in Julia YouTube video, [watch video on YouTube](https://youtu.be/KldNhe4kvuk?si=63h0lTFtiPkKQWjL).
  
{{< video https://youtu.be/KldNhe4kvuk?si=63h0lTFtiPkKQWjL width="800" height="500" >}}



### Envinronment Setup

One thing that is a little different working in Julia (and also Python) compared to R is that it's common practice to utilize a separate environment for each project. This is done to avoid conflicts between packages and package versions that might be used in different projects. Basically, a project consists of a folder that contains files named `Project.toml` and `Manifest.toml`. You can learn the details about Julia environments by reading the [environment documentation](https://docs.julialang.org/en/v1/manual/code-loading/#Environments-1) or get a short tutorial by watching the following video:


*  Julia environments YouTube video, [watch video on YouTube](https://youtu.be/MC-wjQTXOOA?si=mdtPngyDg-m4I1Wa).
  
{{< video https://youtu.be/MC-wjQTXOOA?si=mdtPngyDg-m4I1Wa width="800" height="500" >}}

The `DrWatson.jl` package provides a convenient way to manage projects and environments in Julia. You can learn more about `DrWatson.jl` by reading the [documentation](https://juliadynamics.github.io/DrWatson.jl/stable/) or watching the following video:

{{< video https://youtu.be/jKATlEAu8eE?si=DkjhGrGaeCUXOR2l width="800" height="500" >}}

The following code uses `DrWatson.jl` to activate the environment for this project which is named `biomath_2024`:

```{julia}
#| code-fold: true
#| code-summary: "Show the code" 

# import DrWatson.jl package
using DrWatson

# activate the biomath_2024 environment
@quickactivate "biomath_2024"
```


Now that we have activated our environment, we can use the package manager `Pkg.jl` to see which packages are installed in the environment and their versions:

```{julia}
#| code-fold: true
#| code-summary: "Show the code"


# import Pkg.jl package
import Pkg
# list packages installed in environment
Pkg.status()
```

Note that the Julia version we are using here is

```{julia}
VERSION
```


The nice thing about working with Julia environments is that we can easily share the environment with others. The `Project.toml` and `Manifest.toml` files contain all the information needed to recreate the environment. If you download the project folder for `biomath_2024` from the [GitHub repository](https://github.com/jmgraham30/biomath_2024/tree/main), then all you have to do is:

1. Start Julia in the `biomath_2024` folder which contains the `Project.toml` and `Manifest.toml` files.

2. Activate the environment using `DrWatson.jl` as shown above.

3. Run the `instatiate` command in the package manager to install all the packages listed in the `Project.toml` file[^1].

[^1]: Note that you have to activate the environment any time you want to work in the project. However, you only need to instatiate the project the first time you use it in order to install all the packages. After that, you can just activate the environment and start working.

Some of the packages most relevant for solving problems in biomathematics include:

*  [Plots.jl](http://docs.juliaplots.org/latest/) for plotting.

*  [DifferentialEquations.jl](https://diffeq.sciml.ai/stable/) for numerical computing with differential equations.

* [MethodOfLines.jl](https://docs.sciml.ai/MethodOfLines/stable/) for numerical computing with partial differential equations.

## Plotting 

```{julia}
using Plots, LaTeXStrings
```


```{julia}
#| label: fig-plot_1
#| fig-cap: "Plot of $f(x)=x^2$"


f(x) = x^2
plot(f,-2.0,2.0, label=L"$f(x)=x^2$")
```


```{julia}
#| label: fig-plot_2
#| fig-cap: "Add plot of $g(x) = x^3$ to plot of $f(x)=x^2$"


g(x) = x^3
plot!(g,-2.0,2.0, label=L"$g(x)=x^3$")
```


```{julia}
#| label: fig-plot_3
#| fig-cap: "Plots of $f(x) = x^2$ and $g(x)=x^3$ on same axes with some customizations."

plot([f, g],-2.0,2.0, lw=2, lc=["steelblue" "purple"],label=[L"$f(x)=x^2$" L"$g(x)=x^3$"])
```


```{julia}
#| label: fig-plot_4
#| fig-cap: "Plots of $f(x) = x^2$ and $g(x)=x^3$."

p_1 = plot(f,-2.0,2.0, lw=2, lc="steelblue", title=L"$f(x)=x^2$")
p_2 = plot(g,-2.0,2.0, lw=2, lc="purple", title=L"$g(x)=x^3$")

plot(p_1,p_2, layout=(1,2), legend=false)
```


*  Plotting in Julia YouTube video, [watch video on YouTube](https://youtu.be/yZRw1uP41zI?si=7uwR65DS1_5zaPkM).
  
{{< video https://youtu.be/yZRw1uP41zI?si=7uwR65DS1_5zaPkM width="800" height="500" >}}

## Matrices and Linear Systems


```{julia}
using LinearAlgebra
```

Here's a vector:

```{julia}
my_vect = [1.0,-1.0,1.0]
```

Here's a matrix:

```{julia}
my_matrix = [1.0 0.0 -1.0;
             3.0 1.0 2.0; 
             -1.0 1.0 2.0]
```

Here's the matrix-vector product:

```{julia}
b_vect = my_matrix * my_vect
b_vect
```

Here's the determinant of the matrix:

```{julia}
det(my_matrix)
```

Here are the eigenvalues and eigenvectors of the matrix:

```{julia}
eigen(my_matrix)
```

Here's the solution to the linear system:

```{julia}
my_matrix \ b_vect
```

To learn more, check out

*  Basic Linear Algebra in Julia YouTube video, [watch video on YouTube](https://youtu.be/IFkQ0aB6eHs?si=0Ct_A75LuQzl892o).

{{< video https://youtu.be/IFkQ0aB6eHs?si=0Ct_A75LuQzl892o width="800" height="500" >}}

## Root Finding



## Optimization



## Differential Equations


*  Intro to Differential Equations in Julia YouTube video, [watch video on YouTube](https://youtu.be/lWmKCa6ih9Y?si=HU-JBSqsP-v1lX4q).
  
{{< video https://youtu.be/lWmKCa6ih9Y?si=HU-JBSqsP-v1lX4q width="800" height="500" >}}



## Dynamical Systems



## Partial Differential Equations



## Random Variables



## Symbolic Math

*  Symbolic Computation in Julia YouTube video, [watch video on YouTube](https://youtu.be/L47k2zjPU9s?si=MIiUEqrL-dPzM__l).
  
{{< video https://youtu.be/L47k2zjPU9s?si=MIiUEqrL-dPzM__l width="800" height="500" >}}




## References

::: {#refs}
:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)
