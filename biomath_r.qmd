---
title: "R for Biomathematics"
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: false
execute:
  echo: true
  message: false
bibliography: biomath_2024.bib
license: "CC BY-NC-SA 4.0"
---

[![Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations/blob/main/rstats-artwork/exploder.gif?raw=1){fig-alt="A gif showing the logo for the R language for statistical computing." width=100 fig-align="left"}](https://allisonhorst.com/)

## Overview

Scientific computing software plays a major role in biomathematics for many reasons some of which include:

* The complexity of biological systems leads to models or equations that are difficult to work with analytically but can be handled reasonably well by numerical methods. 

* The need to synthesize theoretical models and data from experiments.

* Plots and other visualizations are important for understanding and communicating scientific ideas and results.

* Computing allows us to use theoretical models to conduct experiments [*in silico*](https://en.wikipedia.org/wiki/In_silico) that would be difficult or impossible to conduct otherwise. 

Thus, this course will make use of scientific computing software. Three commonly used free and open-source languages for scientific computing in biomathematics are [R](https://www.r-project.org/), [Julia](https://julialang.org/), and [Python](https://www.python.org/). In this course, we will mostly use R, but it's worth knowing at least a little about scientific computing in all three languages as each of them has its own strengths and weaknesses in the context of scientific computing for biomathematics. The goal is not to teach you to  become an expert in any of these languages, but rather to become familiar with how to use them to solve some basic problems in biomathematics. Thus, this document is more of a reference than a tutorial. 

This page will focus on R. The other two languages have their own pages:

* [Julia for Biomathematics](https://biomath2024.netlify.app/biomath_julia)

* [Python for Biomathematics](https://biomath2024.netlify.app/biomath_python)

Each of these pages will have a similar structure to this one. We do not provide details on or even an introduction to the basics of programming or the structure of any of the languages. There are many online resources available for learning these things. Instead, we focus on providing some concise examples of the use of these languages for scientific computing in biomathematics. The hope is that the reader will be able to copy and modify these examples to solve their own problems.

The section titles listed in the table of contents for the page should indicate the topics or types of problems we provide examples for. For some of the more involved code or examples, we provide links to other webpages for the code details. In some cases, we provide links to potentially helpful videos or web sites where the reader can learn more.

## R


[R](https://www.r-project.org/) is a programming language developed for statistical computing [@baseR]. You can learn more about the history of R [here](https://en.wikipedia.org/wiki/R_(programming_language)). For programming in R, we highly recommend using the [RStudio Integrated Development Environment](https://posit.co/download/rstudio-desktop/) (IDE) to interface with the language. 

### Functions and Packages

Most of the algorithms and methods we will want to use in solving problems in biomathematics are implemented as functions in R. Base R contains a number of functions including many that are useful for scientific computing. For example, base R contains a function `sin` that implements the mathematical function $\sin(x)$. It is called as follows:

```{r}
sin(pi/4)
```

However, most of the functions we will use are not in base R but rather are contained in packages. A package is a collection of functions and other objects that can be loaded into R and used. There are thousands of packages available for R. You can find a list of packages on the [Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/web/packages/available_packages_by_name.html) or on [Bioconductor](https://www.bioconductor.org/packages/release/BiocViews.html#___Software). Some packages that we will use a lot in the course include:

* [`tidyverse`](https://www.tidyverse.org/) - a collection of packages for data science [@tidy]. The `tidyverse` package itself is a meta-package that loads a number of other packages including `ggplot2`, `dplyr`, `tidyr`, `readr`, `purrr`, `tibble`, `stringr`, and `forcats`. Of these, [`ggplot2`](https://ggplot2.tidyverse.org/) is of great interest because it is used for creating high-quality plots and visualization [@ggplot2].

* [`deSolve`](https://cran.r-project.org/web/packages/deSolve/index.html) - a package for numerical computing with differential equations [@deSolve].

* [`rootSolve`](https://cran.r-project.org/web/packages/rootSolve/index.html) - a package for root finding [@rootSolve].

* [`ReacTran`](https://cran.r-project.org/web/packages/ReacTran/index.html) - a package for numerical computing with partial differential equations equations [@ReacTran].

* [`phaseR`](https://cran.r-project.org/web/packages/phaseR/index.html) - a package for phase plane analysis [@grayling2014].

After you have installed these packages, you can load them into R using the `library` function[^1]. For example, to load the packages listed above, you would use the following code:

[^1]: Note that you must install a package before you can load it. You can install a package using the `install.packages` function or the Packages tab in the RStudio IDE. Packages only need to be installed once but must be loaded in each new R session. 

```{r}
#| echo: true
#| message: false
#| code-fold: true
#| code-summary: "Show the code"

# load packages
library(tidyverse)
library(deSolve)
library(rootSolve)
library(ReacTran)
library(phaseR)
```


## Plotting 



## Matrices and Solving Linear Systems




## Root Finding



## Optimization



## Differential Equations



## Dynamical Systems



## Partial Differential Equations



## Random Variables



## Symbolic Math


* [Ryacas](https://r-cas.github.io/ryacas/) package for symbolic math in R.

## References

::: {#refs}
:::


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| echo: false


library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)
