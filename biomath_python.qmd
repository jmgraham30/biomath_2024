---
title: "Python for Biomathematics"
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: false
execute:
  echo: true
  message: false
jupyter: 
  kernelspec:
    language: "python"
    name: "biomath_py"
    display_name: "biomath_py"
bibliography: biomath_2024.bib
license: "CC BY-NC-SA 4.0"
---


[![Artwork by CevRiemann](https://assets-v2.lottiefiles.com/a/62e02bc6-116f-11ee-aeb0-077c335b3c67/XpwfUikILP.gif){fig-alt="A gif showing the logo for the Python programming language." width=150 fig-align="left"}](https://lottiefiles.com/animations/python-logo-X60VRy17Ng)

## Overview


Scientific computing software plays a major role in biomathematics for many reasons some of which include:

* The complexity of biological systems leads to models or equations that are difficult to work with analytically but can be handled reasonably well by numerical methods. 

* The need to synthesize theoretical models and data from experiments.

* Plots and other visualizations are important for understanding and communicating scientific ideas and results.

* Computing allows us to use theoretical models to conduct experiments [*in silico*](https://en.wikipedia.org/wiki/In_silico) that would be difficult or impossible to conduct otherwise. 

Thus, this course will make use of scientific computing software. Three commonly used free and open-source languages for scientific computing in biomathematics are [R](https://www.r-project.org/), [Julia](https://julialang.org/), and [Python](https://www.python.org/). In this course, we will mostly use R, but it's worth knowing at least a little about scientific computing in all three languages as each of them has its own strengths and weaknesses in the context of scientific computing for biomathematics. The goal is not to teach you to  become an expert in any of these languages, but rather to become familiar with how to use them to solve some basic problems in biomathematics. Thus, this document is more of a reference than a tutorial. 

This page will focus on Python. The other two languages have their own pages:

* [Julia for Biomathematics](https://biomath2024.netlify.app/biomath_julia)

* [R for Biomathematics](https://biomath2024.netlify.app/biomath_r)

Each of these pages will have a similar structure to this one. We do not provide details on or even an introduction to the basic of programming or the structure of any of the languages. There are many resources available for learning these things. Instead, we focus on providing some concise examples of the use of these languages for scientific computing in biomathematics. The hope is that the reader will be able to copy and modify these examples to solve their own problems.


The section titles listed in the table of contents for the page should indicate the topics or types of problems we provide examples for. For some of the more involved code, we provide links to additional webpages that provide more details. In some cases, we provide links to potentially helpful videos or web sites where the reader can learn more.

## Python 

[Python](https://www.python.org/) is an elegant an mature general-purpose programming language [@python3]. You can learn more about the history of Python [here](https://en.wikipedia.org/wiki/Python_(programming_language)).

### Envinronment Setup


*  Master the basics of Conda environments in Python YouTube video, [watch video on YouTube](https://youtu.be/1VVCd0eSkYc?si=KMrEskiA8SJoja_W).

{{< video https://youtu.be/1VVCd0eSkYc?si=KMrEskiA8SJoja_W width="800" height="500" >}}
  

## Plotting 



## Matrices and Solving Linear Systems




## Root Finding



## Optimization



## Differential Equations



## Dynamical Systems



## Partial Differential Equations



## Random Variables



## Symbolic Math




## References

::: {#refs}
:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)
