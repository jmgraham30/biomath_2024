---
title: "Python for Biomathematics"
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: false
execute:
  echo: true
  message: false
jupyter: 
  kernelspec:
    language: "python"
    name: "biomath_py"
    display_name: "biomath_py"
bibliography: biomath_2024.bib
license: "CC BY-NC-SA 4.0"
---


[![Artwork by CevRiemann](https://assets-v2.lottiefiles.com/a/62e02bc6-116f-11ee-aeb0-077c335b3c67/XpwfUikILP.gif){fig-alt="A gif showing the logo for the Python programming language." width=150 fig-align="left"}](https://lottiefiles.com/animations/python-logo-X60VRy17Ng)

## Overview


Scientific computing software plays a major role in biomathematics for many reasons some of which include:

* The complexity of biological systems leads to models or equations that are difficult to work with analytically but can be handled reasonably well by numerical methods. 

* The need to synthesize theoretical models and data from experiments.

* Plots and other visualizations are important for understanding and communicating scientific ideas and results.

* Computing allows us to use theoretical models to conduct experiments [*in silico*](https://en.wikipedia.org/wiki/In_silico) that would be difficult or impossible to conduct otherwise. 

Thus, this course will make use of scientific computing software. Three commonly used free and open-source languages for scientific computing in biomathematics are [R](https://www.r-project.org/), [Julia](https://julialang.org/), and [Python](https://www.python.org/). In this course, we will mostly use R, but it's worth knowing at least a little about scientific computing in all three languages as each of them has its own strengths and weaknesses in the context of scientific computing for biomathematics. The goal is not to teach you to  become an expert in any of these languages, but rather to become familiar with how to use them to solve some basic problems in biomathematics. Thus, this document is more of a reference than a tutorial. 

This page will focus on Python. The other two languages have their own pages:

* [Julia for Biomathematics](https://biomath2024.netlify.app/biomath_julia)

* [R for Biomathematics](https://biomath2024.netlify.app/biomath_r)

Each of these pages will have a similar structure to this one. We do not provide details on or even an introduction to the basics of programming or the structure of any of the languages. There are many resources available for learning these things. Instead, we focus on providing some concise examples of the use of these languages for scientific computing in biomathematics. The hope is that the reader will be able to copy and modify these examples to solve their own problems.


The section titles listed in the table of contents for the page should indicate the topics or types of problems we provide examples for. For some of the more involved code, we provide links to additional webpages that provide more details. In some cases, we provide links to potentially helpful videos or web sites where the reader can learn more.

## Python 

[Python](https://www.python.org/) is an elegant an mature general-purpose programming language [@python3]. You can learn more about the history of Python [here](https://en.wikipedia.org/wiki/Python_(programming_language)).

### Functions and Modules

As in R, most of the algorithms and methods we will want to use in solving problems in biomathematics are implemented as functions in Python. However, base Python contains very few functions useful for mathematics or scientific computing. Most of the functions we will need are contained in modules. A module is a collection of functions and other objects that can be imported into Python. There are many modules available for scientific computing in Python. We will focus on a few of the most commonly used ones such as

* [NumPy](https://numpy.org/): Numerical Python, offers comprehensive mathematical functions, random number generators, linear algebra routines, Fourier transforms, and more.

* [SciPy](https://www.scipy.org/): Scientific Python, provides algorithms for optimization, integration, interpolation, eigenvalue problems, algebraic equations, differential equations, statistics and many other classes of problems.

* [Matplotlib](https://matplotlib.org/): Plotting in Python, is a comprehensive library for creating static, animated, and interactive visualizations in Python.

* [SymPy](https://www.sympy.org/en/index.html): Symbolic Python, is a library for symbolic mathematics.

* [py-pde](https://py-pde.readthedocs.io/en/latest/): py-pde is a python package providing methods and classes useful for solving partial differential equations (PDEs).

One thing that is a little different working in Python (and also Julia) compared to R is that it's common practice to utilize virtual environments to avoid conflicts between functions and objects from different modules. Environments also help keep track of different versions of the Python interpreter. We will not go into details about how to use environments here, but we will provide some links to resources that explain how to use them.

### Envinronment Setup

The most common tool in the scientific community for managing Python environments is [Conda](https://docs.conda.io/en/latest/). Conda is a package manager that can be used to install Python and other software packages. It can also be used to create and manage virtual environments. Conda is available for Windows, Mac, and Linux. You can download and install Conda from [here](https://docs.conda.io/en/latest/miniconda.html). To learn about using Conda, see the following video:

*  Master the basics of Conda environments in Python YouTube video, [watch video on YouTube](https://youtu.be/1VVCd0eSkYc?si=KMrEskiA8SJoja_W).

{{< video https://youtu.be/1VVCd0eSkYc?si=KMrEskiA8SJoja_W width="800" height="500" >}}

The nice thing about working with virtual environments is that we can easily share the environment with others. To do this, we can create a file called `environment.yml` that contains a list of all the packages we want to install in the environment. For example, the [`environment.yml`](https://github.com/jmgraham30/biomath_2024/blob/main/environment.yml) file from the [GitHub repository](https://github.com/jmgraham30/biomath_2024/tree/main)  will create an environment called `biomath_py` that contains Python 3.9 and the NumPy, SciPy, Matplotlib, and SymPy modules among others.


Once we have set up and activated the environment, we can import modules and use functions from them. For example, to import the NumPy module and compute $\sin\left(\frac{\pi}{4}\right)$, we can use the following code:

```{python}
from numpy import sin, pi

sin(pi/4)
```


## Plotting 

```{python}
#| label: fig-plot_1
#| fig-cap: "Plot of $f(x)=x^2$"

import matplotlib.pyplot as plt
import numpy as np

plt.rcParams['text.usetex'] = True


x = np.linspace(-2.0, 2.0, 101)
y2 = np.power(x,2)

def f(x):
    return np.power(x,2)

fig, ax = plt.subplots(figsize=(7, 5), tight_layout=True)

ax.set_xlabel(r'\textit{$x$}',fontsize=13)
ax.set_ylabel('\\textit{$y$}',fontsize=13)
ax.set_title(r'$f(x) = x^2$',fontsize=15)
ax.plot(x, f(x))
```



```{python}
#| label: fig-plot_2
#| fig-cap: "Plot of $f(x)=x^2$ and $g(x)=x^3$ on same axes."

def g(x):
    return np.power(x,3)
  
# Set custom figure size
plt.figure(figsize=(8, 6))

# Plot the curves
plt.plot(x, f(x), label=r'$x^2$', color='steelblue', linewidth=2)
plt.plot(x, g(x), label=r'$x^3$', color='purple', linewidth=2)

# Add labels and title
plt.xlabel(r'$x$',fontsize=13)
plt.ylabel(r'$y$',fontsize=13)
plt.title(r'$f(x) = x^2$',fontsize=13)

# Add legend
plt.legend()

# Show the plot
plt.grid(True)
plt.show()
```


```{python}
#| label: fig-plot_3
#| fig-cap: "Plot of $f(x)=x^2$ and $g(x)=x^3$."


# Create subplots
fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(8, 5))

# Plot y = x^2
ax1.plot(x, f(x), color='steelblue', linewidth=2)
ax1.set_title(r'$f(x) = x^2$')
ax1.set_xlabel(r'$x$')
ax1.set_ylabel(r'$y$')
ax1.grid(True)

# Plot y = x^3
ax2.plot(x, g(x), color='purple', linewidth=2)
ax2.set_title(r'$f(x) = x^3$')
ax2.set_xlabel(r'$x$')
ax2.set_ylabel(r'$y$')
ax2.grid(True)

# Adjust layout to prevent overlap
plt.tight_layout()

# Show the subplots
plt.show()
```


*  Plotting in Python YouTube video, [watch video on YouTube](https://youtu.be/UO98lJQ3QGI?si=F_sNT94QGm9uNBOi).
  
{{< video https://youtu.be/UO98lJQ3QGI?si=F_sNT94QGm9uNBOi width="800" height="500" >}}


## Matrices and Linear Systems

```{python}
import numpy as np
from scipy import linalg
```


Here's a vector:

```{python}
my_vect = np.array([1.0,-1.0,1.0])
print(my_vect)
```

Here's a matrix:

```{python}
my_matrix = np.array([[1.0, 0.0, -1.0],[3.0, 1.0, 2.0],[-1.0, 1.0, 2.0]])
print(my_matrix)
```

Here's the matrix-vector product:

```{python}
b_vect = my_matrix @ my_vect
print(b_vect)
```

Here's the determinant of the matrix:

```{python}
matrix_det = linalg.det(my_matrix)
print(matrix_det)
```

Here are the eigenvalues and eigenvectors of the matrix:

```{python}
eig_vals, eig_vects = linalg.eig(my_matrix)
print(eig_vals)
print(eig_vects)
```

Here's the solution to the linear system:

```{python}
x_vect = linalg.solve(my_matrix, b_vect)
print(x_vect)
```

To learn more, check out

*  Linear Algebra in Python with SciPy and NumPy YouTube video, [watch video on YouTube](https://youtu.be/BNa2s6OtWls?si=GCv9TlvuX2-FbeUu).

{{< video https://youtu.be/BNa2s6OtWls?si=GCv9TlvuX2-FbeUu width="800" height="500" >}}


## Root Finding

Root finding is the process of finding one or more values $x$ such that $f(x) = 0$[^1]. A common application of root finding in biomathematics is to find the steady states of a dynamical system. 

[^1]: Note that we allow for the function $f$ to be vector-valued, in which case we are looking for solutions to a system of nonlinear equations.

The `scipy.optimize` module contains functions for root finding in Python. For example, following code uses the `scipy.optimize.root_scalar` function to find the roots of the function $f(x) = x^2 - 1$ on $[-2,2]$.

We start by plotting the function to get an idea of where the roots are located.

```{python}
import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**2 - 1
  
x = np.linspace(-2, 2, 101)

plt.figure(figsize=(8, 6))

plt.plot(x, f(x), color='steelblue', linewidth=2)

plt.xlabel(r'$x$',fontsize=13)

plt.ylabel(r'$y$',fontsize=13)

plt.title(r'$f(x) = x^2 - 1$',fontsize=13)

plt.grid(True)

plt.show()
```

Now, let's compute the roots:

```{python}
from scipy import optimize

def f(x):
    return x**2 - 1
  
root_1 = optimize.root_scalar(f, bracket=[-2, 0])
root_2 = optimize.root_scalar(f, bracket=[0, 2])

print(root_1.root)
print(root_2.root)


```

Finally, let's add the roots to the plot:

```{python}
plt.figure(figsize=(8, 6))

plt.plot(x, f(x), color='steelblue', linewidth=2)

plt.plot([root_1.root, root_2.root], [0, 0], 'o', color='purple', markersize=10)

plt.xlabel(r'$x$',fontsize=13)

plt.ylabel(r'$y$',fontsize=13)

plt.title(r'$f(x) = x^2 - 1$',fontsize=13)

plt.grid(True)

plt.show()
```



## Optimization



## Differential Equations



## Dynamical Systems



## Partial Differential Equations



## Random Variables



## Symbolic Math




## References

::: {#refs}
:::

:::{.callout-tip collapse="true"}
## Expand for Session Info
```{python}
#| code-fold: true
#| code-summary: "Show the code"

import sys
import numpy as np
import scipy as sp
import matplotlib as mpl
print("Python version:", sys.version)
print('\n'.join(f'{m.__name__}=={m.__version__}' for m in globals().values() if getattr(m, '__version__', None)))
```
:::

[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)
